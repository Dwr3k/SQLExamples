
-- Write a query to count the number of non-null rows in the low column.
select count(high) as "high count", count(low) as "low count" from tutorial.aapl_historical_stock_price;

-- Write a query that determines counts of every single column. With these counts, can you tell which column has the most null values?
select count(id) as "Id count", count(high) as "High count", count(low) as "Low count", count(close) as "close count",
count(open) as "Open count", count(volume) as "Volume count", count(date) as "Date count", count(month) as "Month count", count(year) as "Year count"
from tutorial.aapl_historical_stock_price;

-- Write a query to calculate the average opening price (hint: you will need to use both COUNT and SUM, as well as some simple arithmetic.).
select sum(open)/count(open) as "Open average manual" from tutorial.aapl_historical_stock_price;

-- What was Apple's lowest stock price (at the time of this data collection)?
select min(low) from tutorial.aapl_historical_stock_price;

-- What was the highest single-day increase in Apple's share value?
select max(close-open) from tutorial.aapl_historical_stock_price;

-- Write a query that calculates the average daily trade volume for Apple stock.
select avg(volume) from tutorial.aapl_historical_stock_price;

-- Calculate the total number of shares traded each month. Order your results chronologically.
select max(volume)-min(volume) as "shares traded", month from tutorial.aapl_historical_stock_price group by month order by month asc;

-- Write a query to calculate the average daily price change in Apple stock, grouped by year.
select avg(close-open), year as "Average price change" from tutorial.aapl_historical_stock_price group by year order by year asc;

-- Write a query that calculates the lowest and highest prices that Apple stock achieved each month.
select max(high), min(low), month from tutorial.aapl_historical_stock_price group by month order by 3;

-- Write a query that includes a column that is flagged "yes" when a player is from California, and sort the results with those players first.
select *, case when state = 'CA' then 'yes' else null end as "From cali"
from benn.college_football_players order by 11;

-- Write a query that includes players' names and a column that classifies them into four categories based on height. 
-- Keep in mind that the answer we provide is only one of many possible answers, since you could divide players' heights in many ways.

select player_name, height,
case when height > 0 and height < 66 then 'Below Average'
when height >= 66 and height < 75 then 'Average'
when height >= 75 then 'Above Average'
else 'N/A' end as "Height Group" from benn.college_football_players order by 3;


-- Write a query that selects all columns from benn.college_football_players and adds an additional column that displays the player's name if that player is a junior or senior.
SELECT *,CASE WHEN year IN ('JR', 'SR') THEN player_name ELSE NULL END AS upperclass_player_name FROM benn.college_football_players;

-- Write a query that counts the number of 300lb+ players for each of the following regions: West Coast (CA, OR, WA), Texas, and Other (everywhere else).
select count(*) as players, case when state in ('CA','OR','WA') then 'West coast' when state = 'TX' then 'Texas' else 'Other' end as "Region"
from benn.college_football_players
where weight >= 300
group by 2;

--Write a query that calculates the combined weight of all underclass players (FR/SO) in California as well as the combined weight of all upperclass players (JR/SR) in California.
select sum(weight), case when year in ('FR','SO') then 'Underclassmen'
when year in ('JR','SR') then 'upperclassmen' end as "UnderUpper"
from benn.college_football_players
where state = 'CA'
group by 2;

-- Write a query that displays the number of players in each state, with FR, SO, JR, and SR players in separate columns and another column for the total number of players. 
-- Order results such that states with the most players come first.
select state, 
count(case when year = 'FR' then 1 end) as num_freshmen,
count(case when year = 'SO' then 1 end) as num_sophmores,
count(case when year = 'JR' then 1 end) as num_juniors,
count(case when year = 'SR' then 1 end) as num_seniors,
count(*) as total_players
from benn.college_football_players
group by state
order by 6 DESC;

--Write a query that shows the number of players at schools with names that start with A through M, and the number at schools with names starting with N - Z.
select count(*), case when full_school_name < 'n' then 'AM' else 'NZ' end as Letter_Bracket
from benn.college_football_players group by 2;

--Write a query that returns the unique values in the year column, in chronological order.
select distinct year from tutorial.aapl_historical_stock_price order by year;

-- Write a query that counts the number of unique values in the month column for each year.
select count(distinct month), year from tutorial.aapl_historical_stock_price group by year;

--Write a query that separately counts the number of unique values in the month column and the number of unique values in the `year` column.
select count(distinct month), count(distinct year) from tutorial.aapl_historical_stock_price;

-- Write a query that selects the school name, player name, position, and weight for every player in Georgia, ordered by weight (heaviest to lightest). 
-- Be sure to make an alias for the table, and to reference all column names in relation to the alias.
select player.school_name, player.player_name, player.position, player.weight from benn.college_football_players player where state = 'GA' order by weight desc;

-- Write a query that displays player names, school names and conferences for schools in the "FBS (Division I-A Teams)" division.
select p.player_name, p.full_school_name, t.conference from benn.college_football_players p join benn.college_football_teams T 
on p.school_name = t.school_name where t.division = 'FBS (Division I-A Teams)';

-- Write a query that performs an inner join between the tutorial.crunchbase_acquisitions table and the tutorial.crunchbase_companies table,
-- but instead of listing individual rows, count the number of non-null rows in each table.

select count(c.permalink), count(a.company_permalink) from tutorial.crunchbase_companies c join tutorial.crunchbase_acquisitions a on c.permalink = a.company_permalink;

-- Modify the query above to be a LEFT JOIN. Note the difference in results.
select count(c.permalink), count(a.company_permalink) from tutorial.crunchbase_companies c left join tutorial.crunchbase_acquisitions a on c.permalink = a.company_permalink;

-- Count the number of unique companies (don't double-count companies) and unique acquired companies by state. 
-- Do not include results for which there is no state data, and order by the number of acquired companies from highest to lowest.
select count(distinct c.permalink), count(distinct a.company_permalink), c.state_code from tutorial.crunchbase_companies c 
left join tutorial.crunchbase_acquisitions a ON c.permalink = a.company_permalink where c.state_code is not NULL group by 3 order by 2;

-- Rewrite the previous practice query in which you counted total and acquired companies by state, but with a RIGHT JOIN instead of a LEFT JOIN. 
-- The goal is to produce the exact same results.
select count(distinct c.permalink), count(distinct a.company_permalink), c.state_code from tutorial.crunchbase_acquisitions a 
right join tutorial.crunchbase_companies c ON c.permalink = a.company_permalink where c.state_code is not NULL group by 3 order by 2;

-- Write a query that shows a company's name, "status" (found in the Companies table), and the number of unique investors in that company. 
-- Order by the number of investors from most to fewest. Limit to only companies in the state of New York.

select c.name, c.status, count(distinct i.investor_name) from tutorial.crunchbase_companies c 
left join tutorial.crunchbase_investments i on c.permalink = i.company_permalink where c.state_code = 'NY' group by 1,2 order by 3 desc;

      
-- Write a query that lists investors based on the number of companies in which they are invested. 
-- Include a row for companies with no investor, and order from most companies to least.

select case when i.investor_name is null then 'No Investors' else i.investor_name end as iname, count(distinct c.permalink)
from tutorial.crunchbase_companies c left join tutorial.crunchbase_investments i on c.permalink = i.company_permalink group by 1 order by 2 desc;

-- Write a query that joins tutorial.crunchbase_companies and tutorial.crunchbase_investments_part1 using a FULL JOIN. 
-- Count up the number of rows that are matched/unmatched as in the example above.

select count(case when c.permalink is not null and i.company_permalink is null then c.permalink else null end) as companies,
count(case when c.permalink is null and i.company_permalink is not null then i.company_permalink else null end) as investments,
count(case when c.permalink is not null and i.company_permalink is not null then c.permalink else null end) as both
from tutorial.crunchbase_companies c full join tutorial.crunchbase_investments_part1 i on c.permalink = i.investor_permalink;

-- Write a query that appends the two crunchbase_investments datasets above (including duplicate values). 
-- Filter the first dataset to only companies with names that start with the letter "T", and filter the second to companies with names starting with "M" (both not case-sensitive). 
-- Only include the company_permalink, company_name, and investor_name columns.

select a.company_permalink, a.company_name, a.investor_name from tutorial.crunchbase_investments_part1 a where a.company_name ilike 'T%'
UNION ALL
select b.company_permalink, b.company_name, b.investor_name from tutorial.crunchbase_investments_part2 b where b.company_name ilike 'M%';


-- Write a query that appends the two crunchbase_investments datasets above (including duplicate values). 
-- Filter the first dataset to only companies with names that start with the letter "T", and filter the second to companies with names starting with "M" (both not case-sensitive). 
-- Only include the company_permalink, company_name, and investor_name columns.

select 1 as part, c.status, count(distinct i.investor_permalink) from tutorial.crunchbase_companies c
left join tutorial.crunchbase_investments_part1 i on c.permalink = i.company_permalink group by 1,2

union all

select 2 as part, c.status, count(distinct i.investor_permalink) from tutorial.crunchbase_companies c
left join tutorial.crunchbase_investments_part2 i on c.permalink = i.company_permalink group by 1,2;

